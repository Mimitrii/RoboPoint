openapi: 3.0.0
info:
  version: 1.0.0
  title: "RoboPoint"
  description: The API для заказа блюд в приложении
paths:
  /users:     
    post:
      tags:
      - Пользователь
      summary: Зарегистрироваться в системе
      description: Регистрация пользователя в мобильном приложении с целью последующего оформления заказа
      security:
        - bearerAuth: []
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/auth200'
        '401':
          $ref: '#/components/responses/auth401'
        '404':
          $ref: '#/components/responses/404'
        '409':
          oneOf:
            - $ref: '#/components/responses/EmailExistsError'
            - $ref: '#/components/responses/PhoneExistsError'
        '500':
          $ref: '#/components/responses/InternalServerError'         
  /users/login:
    post:
      tags:
        - Пользователь
      summary: Авторизоваться в системе
      security:
        - bearerAuth: []
      operationId: authUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: Логин
                password:
                  type: string
                  description: Пароль
              required:
                - login
                - password
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500' 
  /menu:  
    get:
      tags:
        - Категории блюд
      summary: Ознакомится с меню
      security:
       - bearerAuth: []
      description: Получить список категорий блюд
      operationId: menuCategory
      parameters:
        - in: query
          name: TypeofMenu
          schema:
            type: string
            maxLength: 150
            minLength: 2
          description: Фильтр по кухням и видам меню
      responses:
        '200':
          description: Cписок категорий блюд
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/menu'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500' 


components:
  schemas:
    User:
      description: Заполнение информации о пользователе
      required:
      - name
      - phoneNumber
      - birthdayDate
      - email
      - password
      - agreement
      - emailSending
      type: object
      properties:
        lastName:
          maxLength: 150
          minLength: 2
          type: string
          description: Фамилия пользователя
          nullable: false
        name:
          maxLength: 150
          minLength: 2
          type: string
          description: Имя пользователя
          nullable: false
        surname:
          maxLength: 150
          minLength: 2
          type: string
          description: Отчество пользователя
          nullable: false
        phoneNumber:
          maxLength: 2000
          minLength: 50
          type: string
          description: Телефон регистрации
          example: +7 999 888 77 66
        birthdayDate:
          type: string
          description: Дата рождения пользователя
          format: date
          nullable: false
          example: '2021-08-30'
          pattern: '^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])$'
          minLength: 10
          maxLength: 10
          x-42c-format: o:date
        sex:
          type: boolean
          description: Доступность столика для бронирования
          nullable: false  
        email:
          maxLength: 500
          minLength: 2
          type: string
          description: email пользователя
          nullable: false
          example: example@email.com
        password:
          maxLength: 150
          minLength: 2
          type: string
          description: Пароль
          nullable: false
        agreement:
          type: boolean
          description: Чекбокс пользовательское соглашение и положение об обработке и защите персональных данных
          nullable: false  
        emailSending:
          type: boolean
          description: Чекбокс рассылки по E-mail и информирования о скидках и акциях
          nullable: false
    menu:
      description: Категории блюд
      type: object
      properties:
        TypeofMenuName: 
          type: string
          maxLength: 150
          minLength: 2
          description: Виды и кухни меню
        name:
          $ref: '#/components/schemas/categoryName'
  responses:
    '200':
      description: OK
    auth200:
      description: Аутентификация выполнена успешно
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                example: 6CKmM8eWBK6VIRrVlioBkZBAHbSannV39qDN+c0S/sQSf8UZNq9Th1lFkLNLTGlJ
    '404':
      description: Что-то пошло не так...
      content:
        application/json:
          schema:
            required:
            - code
            - errorId
            - messageEn
            - messageRu
            type: object
            properties:
              errorId:
                type: integer
              code:
                maximum: 599
                minimum: 400
                type: integer
              messageRu:
                maxLength: 500
                minLength: 1
                pattern: "([А-Яа-я0-9-]+)"
                type: string
                nullable: false
              messageEn:
                maxLength: 500
                minLength: 1
                pattern: "([A-Za-z0-9-]+)"
                type: string
                nullable: false
            description: Текст сообщения об ошибке
    UserNotFound:
      description: Пользователь не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not Found"
    auth401:
      description: Неправильный логин или пароль
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid credentials"
    'EmailExistsError':
      description: Пользователь с таким email уже существует
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User with this email already exists"
    'PhoneExistsError':
      description: Пользователь с таким номером телефона уже существует
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User with this phone number already exists"
    '401':
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not authorized"
    '400':
      description: Не верный запрос
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not authorized"
    '500':
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Bad Request"
  parameters:
    userId:
      name: userId
      in: path
      description: Уникальный ID пользователя
      required: true
      style: simple
      explode: false
      schema:
        type: string
        maxLength: 19
        example: ID00001
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT