openapi: 3.0.0
info:
  version: 1.0.0
  title: "RoboPoint"
  description: The API для заказа блюд в приложении
paths:
  /users:     
    post:
      tags:
      - Пользователь
      summary: Зарегистрироваться в системе
      description: Регистрация пользователя в мобильном приложении с целью последующего оформления заказа
      security:
        - bearerAuth: []
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Аутентификация выполнена успешно
        '401':
          description: Неправильный логин или пароль
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: Конфликт - пользователь уже существует
          content:
            application/json:
             schema:
                oneOf:
                  - $ref: '#/components/schemas/EmailExistsError'
                  - $ref: '#/components/schemas/PhoneExistsError'
        '500':
          $ref: '#/components/responses/InternalServerError'         
  /users/login:
    post:
      tags:
        - Пользователь
      summary: Авторизоваться в системе
      security:
        - bearerAuth: []
      operationId: authUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: Логин
                password:
                  type: string
                  description: Пароль
              required:
                - login
                - password
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500' 
  /menu:  
    get:
      tags:
        - Меню
      summary: Ознакомится с меню
      security:
       - bearerAuth: []
      description: Получить список категорий блюд
      operationId: menuCategory
      parameters:
        - in: query
          name: TypeofMenu
          schema:
            type: string
            maxLength: 150
            minLength: 2
          description: Фильтр по кухням и видам меню
      responses:
        '200':
          description: Cписок категорий блюд
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500' 
  /dishes:
      get:
        tags: 
          - Меню
        security:
          - bearerAuth: []
        summary: Ознакомится с меню
        description: Получить список блюд
        parameters:
          - in: query
            name: categoryName
            required: true
            schema:
              type: string
              maxLength: 150
              minLength: 2
              description: Kатегории блюд
              example: "Напитки"
            description: Фильтр по категории блюда
          - in: query
            name: price_min
            schema:
              type: number
            description: Минимальная цена блюда
          - in: query
            name: price_max
            schema:
              type: number
            description: Максимальная цена блюда
          - in: query
            name: page
            schema:
              type: integer
              default: 1
            description: Номер страницы для пагинации
          - in: query
            name: pageSize
            schema:
              type: integer
              default: 10
            description: Количество блюд на странице
        responses:
          '200':
            description: Cписок категорий блюд
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Dishes'
          '400':
            $ref: '#/components/responses/400'
          '401':
            $ref: '#/components/responses/401'
          '404':
            $ref: '#/components/responses/404'
          '500':
            $ref: '#/components/responses/500' 
  /cart/checkout:
    post:
      tags: 
        - Работа с заказом и корзиной
      security:
        - bearerAuth: []
      summary: Оформление заказа
      description: Оформляет временный заказ на основе текущего содержимого корзины пользователя, проверяет наличие ингредиентов на производстве. Предлагает замену блюд в случае отсутствия ингредиентов.
      operationId: checkoutCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '200':
          description: Заказ успешно оформлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '409':
          description: Отсутствует блюдо
          content:
            application/json:
             schema:
                oneOf:
                  - $ref: '#/components/schemas/CheckoutBadResponse'
                  - $ref: '#/components/schemas/CheckoutQtyResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'


components:
  schemas:
    User:
      description: Заполнение информации о пользователе
      required:
      - name
      - phoneNumber
      - birthdayDate
      - email
      - password
      - agreement
      - emailSending
      type: object
      properties:
        lastName:
          maxLength: 150
          type: string
          description: Фамилия пользователя
          nullable: false
        name:
          maxLength: 150
          type: string
          description: Имя пользователя
          nullable: false
        surname:
          maxLength: 150
          type: string
          description: Отчество пользователя
          nullable: false
        phoneNumber:
          maxLength: 200
          type: string
          description: Телефон регистрации
          example: +7 999 888 77 66
        birthdayDate:
          type: string
          description: Дата рождения пользователя
          format: date
          nullable: false
          example: '2021-08-30'
          pattern: '^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])$'
          minLength: 10
          maxLength: 10
          x-42c-format: o:date
        sex:
          type: boolean
          description: Доступность столика для бронирования
          nullable: false  
        email:
          maxLength: 200
          type: string
          description: email пользователя
          nullable: false
          example: example@email.com
        password:
          maxLength: 150
          minLength: 6
          type: string
          description: Пароль
          nullable: false
        agreement:
          type: boolean
          description: Чекбокс пользовательское соглашение и положение об обработке и защите персональных данных
          nullable: false  
        emailSending:
          type: boolean
          description: Чекбокс рассылки по E-mail и информирования о скидках и акциях
          nullable: false
    Dishes:
      description: Блюда
      required:
      - dishId
      - name
      - description
      - menuId
      type: object
      properties:
        dishId:
          type: string
          description: Уникальный идентификатор блюда
          maxLength: 19
          example: DI00001
        name:
          type: string
          description: Наименование блюда
          maxLength: 50
          minLength: 2
          example: "КокаКолла"
        description:
          type: string
          description: Описание блюда
          maxLength: 250
          minLength: 2
          example: "КокаКолла"
        photo:
          type: string
          format: url
          example: https://static.wikia.nocookie.net/harrypotter/images/c/c5/Pumpkin_Juice_WWHP.jpg/revision/latest/scale-to-width-down/1000?cb=20110529053444
        combo:
          type: boolean
          description: Сборное блюдо 
          example: 'Y'
        proteins:
          type: number
          format: float
          description: Количество протеинов
          example: 120
        fats:
          type: number
          format: float
          description: Количество жиров
          example: 23
        carbohydrates:
          type: number
          format: float
          description: Количество углеводов
          example: 22
        calorie:
          type: number
          format: float
          description: Количество каллорий
          example: 220
        price:
          type: number
          format: float
          description: Цена блюда
          example: 485.23
    Menu:
      description: Виды меню и категории блюд
      required:
      - TypeofMenuName
      type: object
      properties:
        TypeofMenuName: 
          type: string
          maxLength: 50
          minLength: 2
          description: Виды и кухни меню
        categoryName:
          $ref: '#/components/schemas/Category'
    Category:
      description: категории блюд
      required:
      - categoryName
      type: object
      properties:
        categoryName:
          type: string
          maxLength: 50
          minLength: 2
          description: Kатегории блюд
          example: "Напитки"
    EmailExistsError:
          type: object
          properties:
            message:
              example: "Пользователь с таким email уже существует"
    PhoneExistsError:
          type: object
          properties:
            message:
              example: "Пользователь с таким номером телефона уже существует"
    CheckoutResponse:
      type: object
      properties:
        orderId:
          type: string
          maxLength: 19
          example: OD00001       
          description: Уникальный идентификатор заказа
        message:
          type: string
          maxLength: 250
          description: Сообщение о статусе заказа
    CheckoutBadResponse:
      type: object
      properties:
        MissingDishId:
          type: string
          description: Уникальный идентификатор блюда ингредиентов которого недостаточно на производстве
          maxLength: 19
          example: MD00001
        MissingDishName:
          type: string
          description: Наименование блюда
          maxLength: 50
          minLength: 2
          example: "КокаКолла"
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dishes'
          description: Блюда не замену      
        message:
            type: string
            maxLength: 250
            description: Ингредиенты для блюда отсутствуют на производстве выберите блюда на замену
    CheckoutQtyResponse:
     type: object
     properties:
        dishId:
          type: string
          description: Уникальный идентификатор блюда, количество которого ограничено на складе
          maxLength: 19
          example: DI00001
        dishName:
          type: string
          description: Наименование блюда
          maxLength: 50
          minLength: 2
          example: "КокаКолла"
        quantity:
          type: integer
          description: Количество блюд доступных для заказа
          example: 3    
        message:
            type: string
            maxLength: 250
            description: Количество ингредиентов для блюд ограничено, доступно для заказа N блюд
    CheckoutRequest:
      type: object
      required:
        - dishId
        - quantity
      properties:
        dishId:
          type: string
          description: Уникальный идентификатор блюда
          maxLength: 19
          example: DI00001
        quantity:
          type: integer
          maximum: 29
          description: Количество добавляемых блюд
          example: 3
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                example: 6CKmM8eWBK6VIRrVlioBkZBAHbSannV39qDN+c0S/sQSf8UZNq9Th1lFkLNLTGlJ
    '404':
      description: Что-то пошло не так...
      content:
        application/json:
          schema:
            required:
            - code
            - errorId
            - messageEn
            - messageRu
            type: object
            properties:
              errorId:
                type: integer
              code:
                maximum: 599
                minimum: 400
                type: integer
              messageRu:
                maxLength: 500
                minLength: 1
                pattern: "([А-Яа-я0-9-]+)"
                type: string
                nullable: false
              messageEn:
                maxLength: 500
                minLength: 1
                pattern: "([A-Za-z0-9-]+)"
                type: string
                nullable: false
            description: Текст сообщения об ошибке
    '400':
      description: Не верный запрос
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not authorized"
    '401':
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not authorized"
    '500':
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Bad Request"
  parameters:
    userId:
      name: userId
      in: path
      description: Уникальный ID пользователя
      required: true
      style: simple
      explode: false
      schema:
        type: string
        maxLength: 19
        example: ID00001
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT